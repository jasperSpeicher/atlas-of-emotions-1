#actions {
	position: absolute;
	width: 100%;
	height: 100%;
	min-height: 600px;

	top: 0;
	left: 50%;
	margin-left: -50%;

	text-align: center;
	pointer-events: none;
}

#action-graph-container,
#action-labels {
	position: absolute;

	// align top of actions containers with bottom of
	// 'backgrounded' states graph, which is scaled and translated.
	// this math is basically:
	// (states position) - (scaled states offset) - scale * (states graph offset from parent + states graph bottom margin)
	top: calc((100% + #{$states-backgrounded-top}) - 
		(100% * (1 - #{$states-backgrounded-scale}) / 2) - 
		#{$states-backgrounded-scale} * (#{$states-containers-bottom} + 50px));

	left: 50%;
	// min-height: 400px;

	// transform-origin: top;
	// transform: rotateX(60deg);
}

#action-graph-container {
	margin-left: -$actions-graph-width/2;
	transform-origin: top;
	transform: rotateX(60deg);
}

#action-labels {
	pointer-events: none;
	transform: scaleY(0.578);	// 1/sqrt(3), using scale to equate to rotateX(60deg)

	.label {
		position: absolute;
		bottom: 0;
		transform-origin: bottom;

		cursor: pointer;
		pointer-events: auto;
		white-space: nowrap;

		div {
			position: absolute;
			margin-left: -60px;		// TODO: where does this magic number come from?
									// needed to align with arrow points.
			h3 {
				// transform: rotateX(-60deg);
				// transform: scaleY(1.73);	// sqrt(3), using scale to equate to rotateX(60deg)
											// set by d3 instead, since d3 is applying another transform already
			}
		}
	}
}

.action-arrow {
	fill: red;
	fill-opacity: 0.5;
	stroke: none;

	cursor: pointer;
}

#action-graph-container {
	width: $actions-graph-width;
	height: 40%;
	
	pointer-events: auto;
	
	/*
	.axis {
		line,
		path {
			fill: none;
			stroke: $text-color;
			shape-rendering: crispEdges;
		}

		&.labels {
			line,
			path {
				display: none
			}
			text {
				@extend %raleway-light;
				font-size: 0.8em;
			}
		}

		opacity: 0.0;
		transition: opacity #{$label-fade-in-time} cubic-bezier(0.645, 0.045, 0.355, 1);

		&.visible {
			opacity: 1.0;
		}
	}

	.area {
		mix-blend-mode: multiply;
	}
	*/
}
/*
#action-labels {
	div {
		position: absolute;
		pointer-events: none;

		opacity: 0.0;
		transition: opacity #{$label-fade-in-time} cubic-bezier(0.645, 0.045, 0.355, 1);

		&.visible {
			opacity: 1.0;
		}

		h3 {
			// margin-left: -1em;
			cursor: pointer;
			pointer-events: auto;
		}
	}

	.label {
		@include emotion-color;
		white-space: nowrap;
	}

}
*/